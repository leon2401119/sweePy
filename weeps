#!/usr/bin/env python3

import threading
import time
import subprocess
from multiprocessing import cpu_count
import numpy as np
from utils import *
import os
import logging
from scheduler import *
import yaml

with open('weeps.yaml', 'r') as f:
    configs = yaml.safe_load(f)

REPEAT = configs['basics']['repeat']
SLEEP_TIME = configs['tunnables']['sleep_time']
STOP_AFTER = configs['basics']['stop_after']
MAXGEN = configs['basics']['maxgen']
ROOT_DIR = configs['paths']['root_dir']
LOG_LVL = configs['miscs']['log_level'] * 10

logging.basicConfig(filename='weeps.log', filemode='w', format='[%(levelname)s] %(asctime)s -- %(message)s', datefmt='%H:%M:%S', level=LOG_LVL)


def weep(problem_id, ell, inst_num, sch, bin_path, out_path):
    assert type(sch) is Scheduler, 'weep procedure is not assigned a proper scheduler'
    assert problem_id < 3 or inst_num is not None, 'Missing instance number for instance-based problem'
    bin_dir,bin_name = os.path.split(os.path.abspath(bin_path))


    data = {}                    # pop,result pairs
    job_arr = []                 # list of (pop,jid) tuples
    wLock = threading.Lock()     # lock for critical sections among threads (particularly in phase 2)

    best_nfe = np.inf
    best_pop = None
    solved = False
    

    def trial_population(pop): # FIXME : ensure reentrant
        nonlocal data
        nonlocal best_nfe
        nonlocal best_pop

        results = []
        for _ in range(REPEAT):
            jid = sch.queue(f'./{bin_name} {ell} {pop} {problem_id} {MAXGEN} -1 1 0 -1',bin_dir,inst_num)
            out = poll_until_return(sch, jid, format_DSMGA2_output, SLEEP_TIME)

            if out[3]: # fail
                break
            else:
                results.append(out)

        if len(results):
            data[pop] = [np.mean(l) for l in list(zip(*results))]
        
        # CRITICAL : possible race condition
        wLock.acquire()
        if len(results) == 10 and data[pop][1] < best_nfe:
            best_nfe = data[pop][1]
            best_pop = pop
        wLock.release()

        return len(results) == 10

    
    ### phase 1 : stop after STOP_AFTER consecutive nfe increase or the current nfe reaches 2x the best nfe
    def phase1_impl(init_pop):
        nonlocal solved

        current_pop = init_pop
        while True:
            s = trial_population(current_pop)
            solved = solved or s
       
            ''' break condition 1 : consider solves only '''
            if s and data[current_pop][1] > 2 * best_nfe:
                break

            ''' break condition 1 : consider all '''
            #if data[current_pop][1] > 2 * best_nfe:
            #    break

            ''' check moving average '''
            if s and K_incr_in_mv_avg(data,STOP_AFTER):
                break

            current_pop += 30 # if loop continues


    ### phase 2 : select successful pop with lowest nfe and search its neighborhood
    def phase2_impl(range_obj):

        threads = []
        for pop in range_obj:
            if pop == best_pop: # skip recalculation
                continue
            elif pop <= 0:  # disallow negative population sizes
                continue

            # create & start threads
            thread = threading.Thread(target = trial_population, args=(pop,))
            thread.start()
            threads.append(thread)

        for thread in threads: # wait for all threads to finish
            thread.join()


    phase1_impl(10)
    phase2_impl(range(best_pop-25,best_pop+26,5))
    phase2_impl(range(best_pop-4,best_pop+5,1))


    ### done : print and write out the results

    if inst_num is not None:
        print(f'[{os.path.basename(out_path)}] {inst_num} {best_pop} {best_nfe}')
    else:
        print(f'[{os.path.basename(out_path)}] {best_pop} {best_nfe}')

    # FIXME : ./DSMGA2 does not currently record revive count, which should also be monitored be dumped into txt
    if inst_num is not None:
        with open(os.path.join(out_path,f'{problem_id}_{ell}_{inst_num}.txt'),'w') as f:
            for pop in sorted(data.keys()):
                gen,nfe,lsnfe,failnum = data[pop] # failnum is always 0
                f.write(f'{pop}\t{gen}\t{nfe}\t{lsnfe}\t{failnum}\n')

    return best_pop, data[best_pop][0], data[best_pop][1]


def weeps():
    sch = Scheduler()

    threads_dic = {}
    results_dic = {}

    prob_name_to_num = {
        'mktrap':1,
        'ftrap':2,
        'cyctrap':3,
        'nks1':4,
        'spin':5,
        'sat':6,
        'maxcut':7,
        'htrap':8,
        'hxor':9,
        'hiff':10
    }
    
    for idx, GA_bin in enumerate(configs['paths']['GA_bins']):
        version_name = configs['paths']['version_names'][idx]
        threads_dic[version_name] = []
        results_dic[version_name] = []

        problem_id = prob_name_to_num[configs['basics']['fffff']]
        ell = configs['basics']['ell']
        bin_path = GA_bin
        out_path = os.path.join(ROOT_DIR,version_name)
        os.makedirs(out_path,exist_ok=True) # create folder if non-existant

        assert os.path.exists(bin_path), f'Binary cannot be located at the provided path "{bin_path}"'
        assert type(version_name) is str and len(version_name), f'Please provide a valid version name for "{bin_path}"'
        
        if configs['basics']['fffff'] == 'mktrap':
            for _ in range(10):
                thread = threading.Thread(target = lambda l,tup : l.append(weep(*tup)), args = (results_dic[version_name],(problem_id,ell,None,sch,GA_bin,out_path)) )
                thread.start()
                threads_dic[version_name].append(thread)
            print(f'[{version_name}] Starting MK-{ell}')

        elif configs['basics']['fffff'] == 'nks1':
            for i in range(100):
                thread = threading.Thread(target = lambda l,tup : l.append(weep(*tup)), args = (results_dic[version_name],(problem_id,ell,i,sch,GA_bin,out_path)) )
                thread.start()
                threads_dic[version_name].append(thread)
            print(f'[{version_name}] Starting NKs1-{ell}')


    while len(threads_dic.keys()):  # main scheduler loop
        global_threads_remain = False
        for version_name in list(threads_dic.keys())[:]:
            threads_remain = False
            for thread in threads_dic[version_name][:]:
                if not thread.is_alive():
                    thread.join()
                    threads_dic[version_name].remove(thread)
                else:
                    threads_remain = True
                    global_threads_remain = True

            if not threads_remain: # sweep for a GA is done
                threads_dic.pop(version_name)
                sweep_results = [np.mean(l) for l in zip(*results_dic[version_name])]
                with open(os.path.join(ROOT_DIR,version_name,f'{problem_id}_{ell}.txt'),'w') as f:
                    f.write(f'{sweep_results[0]}\t{sweep_results[1]}\t{sweep_results[2]}')

                print(f'[{version_name}] Summary --- Pop: {sweep_results[0]}, Gen: {sweep_results[1]}, NFE: {sweep_results[2]}')

        if global_threads_remain:
            sch.schedule()
            time.sleep(1) # sleep for some time
        else:
            break


if __name__ == '__main__':
    weeps()
